.wp-block-group {
  $basicKoroHeight: 25px;
  $pulseKoroHeight: 50px;

  // group blocks can contain other aligned blocks.
  &:not(.alignwide):not(.alignfull) {
    .alignwide,
    .alignfull {
      max-width: 100%;
      margin-left: 0;
      margin-right: 0;
    }
  }

  &.alignwide,
  &.alignfull {
    // non-aligned content within alignwide and alignfull should have contentWidth.
    .wp-block-group__inner-container > *:not(.alignwide):not(.alignfull):not(.alignleft):not(.alignright) {
      max-width: $content-width-max;
      margin-left: auto;
      margin-right: auto;
    }
  }

  // Blocks with backgrounds have a padding.
  &.has-background {
    @include breakpoint-value($block-paddings) {
      $padding: $-bp-value;

      padding: $padding $padding;

      // Let alignfull stretch to the edge.
      // @note increase specificity to override earlier :not():not()
      .alignfull.alignfull {
        margin-left: -$padding;
        margin-right: -$padding;
        max-width: calc(100% + #{$padding * 2});
      }
    }
  }

  &[class*='is-style-koro-'] {
    position: relative;

    // On the frontend if an optional class is added, move the block so that the
    // effect is on top of an adjacent block. This is not done in the editor in
    // order not to obstruct any controls.
    &.cover-adjacent {
      @if $is-frontend {
        &[class*='is-style-koro-top-'] {
          top: -48px;
          margin-bottom: -48px;

          @include mq($from: medium) {
            top: -72px;
            margin-bottom: -75px;
          }
        }

        &[class*='is-style-koro-bottom-'] {
          bottom: -48px;
          margin-top: -48px;

          @include mq($from: medium) {
            bottom: -72px;
            margin-top: -75px;
          }
        }
      }
    }
    // If the cover-adjacent class is not added, instead make more space so that
    // spacing between blocks is preserved despite the effect.
    &:not(.cover-adjacent) {
      @include breakpoint-value($block-margins) {
        $margin: $-bp-value;

        &.is-style-koro-top-basic {
          margin-top: calc(#{$margin} + #{$basicKoroHeight});
        }

        &.is-style-koro-top-pulse {
          margin-top: calc(#{$margin} + #{$pulseKoroHeight});
        }

        &.is-style-koro-bottom-basic {
          margin-bottom: calc(#{$margin} + #{$basicKoroHeight});
        }

        &.is-style-koro-bottom-pulse {
          margin-bottom: calc(#{$margin} + #{$pulseKoroHeight});
        }
      }
    }

    &::before {
      content: "";
      z-index: 10;
      position: absolute;
      left: 0;
      right: 0;
      width: 100%;
      background-repeat: repeat-x;
      background-size: auto 100%;
      pointer-events: none;
    }
  }

  &[class*='is-style-koro-top-'] {
    &::before {
      top: 1px;
      transform: translateY(-100%);
    }
  }

  &[class*='is-style-koro-bottom-'] {
    &::before {
      bottom: 1px;
      transform: scaleY(-1) translateY(-100%);
    }
  }

  &.is-style-koro-bottom-basic,
  &.is-style-koro-top-basic {
    &::before {
      height: $basicKoroHeight;
    }
    @each $color-name, $color-value in $color-palette {
      &.has-#{$color-name}-background-color::before {
        background-image: svg-load('./images/koro-basic.svg', fill=$color-value);
      }
    }
  }

  &.is-style-koro-bottom-pulse,
  &.is-style-koro-top-pulse {
    &::before {
      height: 50px;
    }
    @each $color-name, $color-value in $color-palette {
      &.has-#{$color-name}-background-color::before {
        background-image: svg-load('./images/koro-pulse.svg', fill=$color-value);
      }
    }
  }
}
